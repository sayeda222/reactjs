{"version":3,"sources":["pages/content/Content.js"],"names":["connect","state","currentLanguageCode","multilanguage","contentID","content","contentId","dispatch","setLoader","value","strings","useState","contentDetails","setContentDetail","useEffect","console","log","getContent","a","action","constant","ACTION","CONTENT","PAGES","isCheckValueAndSetParams","WebService","get","response","description","title","name","metaDescription","to","headerContainerClass","headerPaddingClass","headerTop","className","dangerouslySetInnerHTML","__html"],"mappings":"wQAkFeA,6BAfS,SAACC,GACrB,MAAO,CACHC,oBAAqBD,EAAME,cAAcD,oBACzCE,UAAWH,EAAMI,QAAQC,cAGN,SAAAC,GAEvB,MAAO,CACHC,UAAW,SAACC,GACRF,EAASC,YAAUC,QAKhBT,CAA6CG,yBArE5C,SAAC,GAA4D,IAA1DO,EAAyD,EAAzDA,QAASN,EAAgD,EAAhDA,UAAWI,EAAqC,EAArCA,UAAWN,EAA0B,EAA1BA,oBAE9C,EAA2CS,mBAAS,IAApD,mBAAOC,EAAP,KAAuBC,EAAvB,KACAC,qBAAU,WACNC,QAAQC,IAAIZ,GACZa,MAED,CAACb,IAEJ,IAAMa,EAAU,uCAAG,8BAAAC,EAAA,6DACfV,GAAU,GACNW,EAFW,UAECC,IAASC,OAAOC,SAFjB,OAE2BF,IAASC,OAAOE,OAF3C,OAEmDnB,GAFnD,OAE+DoB,YAAyB,SAAUtB,IAFlG,kBAIUuB,IAAWC,IAAIP,GAJzB,QAIPQ,EAJO,UAMPZ,QAAQC,IAAIW,GACZd,EAAiBc,IAErBnB,GAAU,GATC,kDAWXA,GAAU,GAXC,0DAAH,qDAchB,OACI,eAAC,WAAD,WACI,eAAC,IAAD,WACI,gCAAQI,GAAkBA,EAAegB,YAAYC,QACrD,sBACIC,KAAK,cACLzB,QAASO,GAAkBA,EAAegB,YAAYG,qBAI9D,cAAC,kBAAD,CAAiBC,GAAG,IAApB,SAAyBtB,EAAO,OAChC,eAAC,kBAAD,CAAiBsB,GAAG,WAApB,UAAgCpB,GAAkBA,EAAegB,YAAYE,KAA7E,OAEA,eAAC,IAAD,CAAQG,qBAAqB,kBACzBC,mBAAmB,mBACnBC,UAAU,UAFd,UAII,cAAC,IAAD,IACA,qBAAKC,UAAU,8BAAf,SACI,qBAAKA,UAAU,YAAf,SAEQxB,GACA,mBAAGyB,wBAAyB,CAAEC,OAAQ1B,EAAegB,YAAYA","file":"static/js/18.f4e54610.chunk.js","sourcesContent":["\nimport React, { useEffect, Fragment, useState } from \"react\";\nimport MetaTags from \"react-meta-tags\";\nimport { BreadcrumbsItem } from \"react-breadcrumbs-dynamic\";\nimport WebService from '../../util/webService';\nimport constant from '../../util/constant';\nimport { setLoader } from \"../../redux/actions/loaderActions\";\nimport Layout from \"../../layouts/Layout\";\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\nimport { connect } from 'react-redux';\nimport { multilanguage } from \"redux-multilanguage\";\nimport { isCheckValueAndSetParams } from '../../util/helper';\n\nconst Content = ({ strings, contentID, setLoader, currentLanguageCode }) => {\n\n    const [contentDetails, setContentDetail] = useState('');\n    useEffect(() => {\n        console.log(contentID)\n        getContent();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [contentID]);\n\n    const getContent = async () => {\n        setLoader(true)\n        let action = `${constant.ACTION.CONTENT}${constant.ACTION.PAGES}${contentID}${isCheckValueAndSetParams('?lang=', currentLanguageCode)}`;\n        try {\n            let response = await WebService.get(action);\n            if (response) {\n                console.log(response)\n                setContentDetail(response)\n            }\n            setLoader(false)\n        } catch (error) {\n            setLoader(false)\n        }\n    }\n    return (\n        <Fragment>\n            <MetaTags>\n                <title>{contentDetails && contentDetails.description.title}</title>\n                <meta\n                    name=\"description\"\n                    content={contentDetails && contentDetails.description.metaDescription}\n                />\n            </MetaTags>\n\n            <BreadcrumbsItem to=\"/\">{strings[\"Home\"]}</BreadcrumbsItem>\n            <BreadcrumbsItem to=\"/content\">{contentDetails && contentDetails.description.name} </BreadcrumbsItem>\n\n            <Layout headerContainerClass=\"container-fluid\"\n                headerPaddingClass=\"header-padding-2\"\n                headerTop=\"visible\">\n                {/* breadcrumb */}\n                <Breadcrumb />\n                <div className=\"cart-main-area pt-90 pb-100\">\n                    <div className=\"container\">\n                        {\n                            contentDetails &&\n                            <p dangerouslySetInnerHTML={{ __html: contentDetails.description.description }} ></p>\n                        }\n                    </div>\n                </div>\n            </Layout>\n        </Fragment>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        currentLanguageCode: state.multilanguage.currentLanguageCode,\n        contentID: state.content.contentId\n    };\n};\nconst mapDispatchToProps = dispatch => {\n\n    return {\n        setLoader: (value) => {\n            dispatch(setLoader(value));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(multilanguage(Content));\n"],"sourceRoot":""}