{"version":3,"sources":["pages/other/Cart.js"],"names":["couponCode","name","validate","required","value","message","pattern","defaultImage","product","images","length","imageUrl","image","connect","state","cartCount","cartData","cartID","defaultStore","merchantData","countryData","userData","country","stateData","merchant","isLoading","loading","dispatch","setLoader","decreaseQuantity","item","addToast","cartId","quantityCount","addToCart","increaseQuantity","deleteFromCart","getState","code","multilanguage","location","getValue","strings","useToasts","pathname","history","useHistory","useState","cartItems","setCartItems","useForm","mode","codeRef","register","codeSubmit","handleSubmit","codeErr","errors","shippingOptions","useEffect","getCartData","a","action","constant","ACTION","CART","WebService","get","response","console","log","setTimeout","push","fetchData","applyPromoCode","data","PROMO","param","post","to","process","headerContainerClass","headerPaddingClass","headerTop","className","isValidObject","products","map","cartItem","key","finalDiscountedPrice","finalPrice","description","friendlyUrl","src","alt","onClick","quantity","type","readOnly","displaySubTotal","forEach","promoCode","onSubmit","ref","style","marginTop","i","optionName","optionPriceText"],"mappings":"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","file":"static/js/19.2c1d1267.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport React, { Fragment, useState, useEffect } from \"react\";\r\nimport { multilanguage } from \"redux-multilanguage\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport MetaTags from \"react-meta-tags\";\r\nimport { BreadcrumbsItem } from \"react-breadcrumbs-dynamic\";\r\n// import { Redirect } from 'react-router-dom';\r\nimport { connect } from \"react-redux\";\r\n// import { getDiscountPrice } from \"../../helpers/product\";\r\nimport { isValidObject } from \"../../util/helper\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { getState } from \"../../redux/actions/userAction\";\r\nimport { setLoader } from \"../../redux/actions/loaderActions\";\r\nimport {\r\n  addToCart,\r\n  // decreaseQuantity,\r\n  deleteFromCart,\r\n  // cartItemStock,\r\n  // deleteAllFromCart\r\n} from \"../../redux/actions/cartActions\";\r\nimport Layout from \"../../layouts/Layout\";\r\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\r\nimport constant from '../../util/constant';\r\nimport WebService from '../../util/webService';\r\n\r\nconst couponCode = {\r\n  code: {\r\n    name: 'code',\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Coupon code is required\"\r\n      },\r\n\r\n      pattern: {\r\n        value: /^([a-zA-Z0-9 _-]+)$/,\r\n        message: 'Please entered alphanumeric value'\r\n      }\r\n    }\r\n  }\r\n}\r\n// const quoteForm = {\r\n\r\n//   postalCode: {\r\n//     name: \"postalCode\",\r\n//     validate: {\r\n//       required: {\r\n//         value: true,\r\n//         message: \"postalCode is required\"\r\n//       }\r\n//     }\r\n//   },\r\n//   country: {\r\n//     name: \"country\",\r\n//     validate: {\r\n//       required: {\r\n//         value: true,\r\n//         message: \"Country is required\"\r\n//       }\r\n//     }\r\n//   },\r\n//   stateProvince: {\r\n//     name: \"stateProvince\",\r\n//     validate: {\r\n//       required: {\r\n//         value: true,\r\n//         message: \"State is required\"\r\n//       }\r\n//     }\r\n//   },\r\n// };\r\nconst Cart = ({\r\n  location,\r\n  cartID,\r\n  defaultStore,\r\n  decreaseQuantity,\r\n  increaseQuantity,\r\n  getValue,\r\n  deleteFromCart,\r\n  countryData,\r\n  stateData,\r\n  getState,\r\n  strings,\r\n  merchant,\r\n  isLoading,\r\n  setLoader,\r\n  cartCount\r\n  // deleteAllFromCart,\r\n\r\n}) => {\r\n  const { addToast } = useToasts();\r\n  const { pathname } = location;\r\n  const history = useHistory();\r\n  const [cartItems, setCartItems] = useState({})\r\n  // const cartTotalPrice = cartItems.displaySubTotal;\r\n  // const grandTotalPrice = cartItems.displaySubTotal;\r\n  // const { register, handleSubmit, control, errors } = useForm({ mode: 'onChange' });\r\n  const {\r\n    register: codeRef,\r\n    handleSubmit: codeSubmit,\r\n    errors: codeErr\r\n  } =\r\n    useForm({ mode: 'onChange' });\r\n\r\n  // const [shippingOptions, setShippingOptions] = useState();\r\n  const [shippingOptions] = useState();\r\n\r\n  useEffect(() => {\r\n    getCartData()\r\n    // if (!isValidObject(cartItems)) {\r\n    //   history.push('/')\r\n    // }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n  useEffect(() => {\r\n    console.log(cartCount)\r\n    async function fetchData() {\r\n      let action = constant.ACTION.CART + cartID + '?store=' + defaultStore;\r\n      try {\r\n        let response = await WebService.get(action);\r\n        if (response) {\r\n          setCartItems(response)\r\n        }\r\n      } catch (error) {\r\n        console.log(error, 'jaimin')\r\n        setTimeout(() => {\r\n          history.push('/')\r\n        }, 200);\r\n      }\r\n    }\r\n    fetchData();\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [cartCount])\r\n\r\n  const getCartData = async () => {\r\n    setLoader(true)\r\n    let action = constant.ACTION.CART + cartID + '?store=' + defaultStore;\r\n    try {\r\n      let response = await WebService.get(action);\r\n      if (response) {\r\n        setCartItems(response)\r\n      }\r\n      setLoader(false)\r\n    } catch (error) {\r\n      setLoader(false)\r\n      setTimeout(() => {\r\n        history.push('/')\r\n      }, 200);\r\n\r\n    }\r\n  }\r\n  const deleteAllFromCart = () => {\r\n    cartItems.products.forEach((value) => {\r\n      deleteFromCart(cartItems.code, value, defaultStore, addToast)\r\n    });\r\n    //go to home page\r\n    history.push('/');\r\n\r\n  }\r\n\r\n  // const decrease = (cartItems, item, qty) => {\r\n\r\n  // }\r\n\r\n  // const increase = (cartItems, item, key, addToast, qty) => {\r\n  //   console.log('increaseQuantity... ' + JSON.stringify(cartItems.products));          \r\n  //   item.quantity = qty;\r\n  //   console.log('quantity... ' + JSON.stringify(item)); \r\n  //   cartItems.products.splice(key,1,item);\r\n  //   console.log('New items... ' + JSON.stringify(cartItems.products)); \r\n  //   //modify qty\r\n\r\n  // }\r\n\r\n  // const getQuote = async (data) => {\r\n  //   let action = constant.ACTION.CART + cartID + '/' + constant.ACTION.SHIPPING;\r\n  //   let param = {};\r\n  //   param = { 'postalCode': data.postalCode, 'countryCode': data.country }\r\n  //   try {\r\n  //     let response = await WebService.post(action, param);\r\n  //     //console.log(response.shippingOptions);\r\n  //     if (response) {\r\n  //       setShippingOptions(response.shippingOptions)\r\n  //     }\r\n  //   } catch (error) {\r\n  //   }\r\n  // }\r\n  const applyPromoCode = async (data) => {\r\n    // console.log(data)\r\n    setLoader(true)\r\n    let action = constant.ACTION.CART + cartID + '/' + constant.ACTION.PROMO + data.code;\r\n    let param = {};\r\n    param = { 'promoCart': data.code }\r\n    try {\r\n      let response = await WebService.post(action, param);\r\n      // console.log(response);\r\n      if (response) {\r\n        setCartItems(response)\r\n      }\r\n      setLoader(false)\r\n    } catch (error) {\r\n      setLoader(false)\r\n    }\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <MetaTags>\r\n        <title>{merchant.name} | {strings[\"Place your order\"]}</title>\r\n        {/* <meta\r\n          name=\"description\"\r\n          content=\"Cart page of flone react shopizer eCommerce template.\"\r\n        /> */}\r\n      </MetaTags>\r\n\r\n      <BreadcrumbsItem to=\"/\">{strings[\"Home\"]}</BreadcrumbsItem>\r\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + pathname}>\r\n        {strings[\"Cart\"]}\r\n      </BreadcrumbsItem>\r\n\r\n      <Layout headerContainerClass=\"container-fluid\"\r\n        headerPaddingClass=\"header-padding-2\"\r\n        headerTop=\"visible\">\r\n        {/* breadcrumb */}\r\n        <Breadcrumb />\r\n        <div className=\"cart-main-area pt-90 pb-100\">\r\n          <div className=\"container\">\r\n            {isValidObject(cartItems) && cartItems.products.length > 0 ? (\r\n              <Fragment>\r\n                <h3 className=\"cart-page-title\">{strings[\"Your cart items\"]}</h3>\r\n                <div className=\"row custom-cart-item\">\r\n                  <div className=\"col-12\">\r\n                    <div className=\"table-content table-responsive cart-table-content\">\r\n                      <table>\r\n                        <thead>\r\n                          <tr>\r\n                            <th>{strings[\"Image\"]}</th>\r\n                            <th>{strings[\"Product Name\"]}</th>\r\n                            <th>{strings[\"Unit Price\"]}</th>\r\n                            <th>{strings[\"Qty\"]}</th>\r\n                            <th>{strings[\"Subtotal\"]}</th>\r\n                            <th>{strings[\"Action\"]}</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {cartItems.products.map((cartItem, key) => {\r\n\r\n                            // const finalProductPrice = cartItem.originalPrice;\r\n                            const finalDiscountedPrice = cartItem.finalPrice;\r\n\r\n                            return (\r\n                              <tr key={key}>\r\n                                <td className=\"product-thumbnail\">\r\n                                  <Link to={\"/product/\" + cartItem.description.friendlyUrl} >\r\n                                    <img className=\"img-fluid\" src={defaultImage(cartItem)} alt=\"\" />\r\n                                  </Link>\r\n                                </td>\r\n\r\n                                <td className=\"product-name\">\r\n                                  <Link to={\"/product/\" + cartItem.description.friendlyUrl}>\r\n                                    {cartItem.description.name}\r\n                                  </Link>\r\n                                </td>\r\n\r\n                                <td className=\"product-price-cart\">\r\n                                  {/* {cartItem.discounted ? (\r\n                                    <Fragment>\r\n                                      <span className=\"amount old\">\r\n                                        {finalProductPrice}\r\n                                      </span>\r\n                                      <span className=\"amount\">\r\n                                        {finalDiscountedPrice}\r\n                                      </span>\r\n                                    </Fragment>\r\n                                  ) : ( */}\r\n                                  <span className=\"amount\">\r\n                                    {finalDiscountedPrice}\r\n                                  </span>\r\n                                  {/* )} */}\r\n                                </td>\r\n\r\n                                <td className=\"product-quantity\">\r\n                                  <div className=\"cart-plus-minus\">\r\n                                    {/* <button className=\"dec qtybutton\" onClick={() => decreaseQuantity(cartItems, key, cartItem, addToast, cartItems.code, cartItem.quantity - 1, defaultStore)} > - </button>\r\n                                    <input className=\"cart-plus-minus-box\" onChange={() => getValue()} type=\"text\" value={cartItem.quantity} />\r\n                                    <button className=\"inc qtybutton\" onClick={() => increaseQuantity(cartItem, cartID, cartItem.quantity + 1, addToast)}>+</button> */}\r\n                                    <button className=\"dec qtybutton\" onClick={() => decreaseQuantity(cartItem, addToast, cartItems.code, cartItem.quantity - 1, defaultStore)} > - </button>\r\n                                    <input className=\"cart-plus-minus-box\" type=\"text\" value={cartItem.quantity} readOnly />\r\n                                    <button className=\"inc qtybutton\" onClick={() => increaseQuantity(cartItem, addToast, cartItems.code, cartItem.quantity + 1, defaultStore)}>+</button>\r\n\r\n                                  </div>\r\n                                </td>\r\n                                <td className=\"product-subtotal\">\r\n                                  {\r\n                                    cartItem.displaySubTotal\r\n                                  }\r\n                                </td>\r\n\r\n                                <td className=\"product-remove\">\r\n                                  <button onClick={() => deleteFromCart(cartItems.code, cartItem, defaultStore, addToast)}> <i className=\"fa fa-times\"></i> </button>\r\n                                </td>\r\n                              </tr>\r\n                            );\r\n                          })}\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-lg-12\">\r\n                    <div className=\"cart-shiping-update-wrapper\">\r\n\r\n                      <div className=\"cart-clear\">\r\n                        <button onClick={() => deleteAllFromCart()}>\r\n                          {strings[\"Clear Shopping Cart\"]}\r\n                        </button>\r\n                      </div>\r\n                      <div className=\"cart-shiping-update\">\r\n                        <Link to=\"/\">{strings[\"Continue Shopping\"]} </Link>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"row cart-custom-row\">\r\n                  <div className=\"col-lg-4 col-md-6\">\r\n                    &nbsp;\r\n                  </div>\r\n                  {/* \r\n                  <div className=\"col-lg-4 col-md-6\">\r\n                    <div className=\"cart-tax\">\r\n                      <div className=\"title-wrap\">\r\n                        <h4 className=\"cart-bottom-title section-bg-gray\">\r\n                          {strings[\"Estimate Shipping And Tax\"]}\r\n                        </h4>\r\n                      </div>\r\n                      <div className=\"tax-wrapper\">\r\n                        <p>\r\n                          {strings[\"Enter your destination to get a shipping estimate.\"]}\r\n                        </p>\r\n                        <div className=\"tax-select-wrapper\">\r\n                          <form onSubmit={handleSubmit(getQuote)}>\r\n                            <div className=\"tax-select\">\r\n                              <Controller\r\n                                name={quoteForm.country.name}\r\n                                control={control}\r\n                                rules={quoteForm.country.validate}\r\n                                render={props => {\r\n                                  return (\r\n                                    <select onChange={(e) => { props.onChange(e.target.value); getState(e.target.value) }} value={props.value}>\r\n                                      <option>{strings[\"Select a country\"]}</option>\r\n                                      {\r\n\r\n                                        countryData.map((data, i) => {\r\n                                          return <option key={i} value={data.code}>{data.name}</option>\r\n                                        })\r\n                                      }\r\n                                    </select>\r\n                                  )\r\n                                }}\r\n                              />\r\n                              {errors[quoteForm.country.name] && <p className=\"error-msg\">{errors[quoteForm.country.name].message}</p>}\r\n                            </div>\r\n                            <div className=\"tax-select\">\r\n                              {\r\n                                stateData && stateData.length > 0 ?\r\n                                  <Controller\r\n                                    name={quoteForm.stateProvince.name}\r\n                                    control={control}\r\n                                    rules={quoteForm.stateProvince.validate}\r\n                                    render={props => {\r\n                                      return (\r\n                                        <select onChange={(e) => { props.onChange(e.target.value) }} value={props.value}>\r\n                                          <option>{strings[\"Select a state\"]}</option>\r\n                                          {\r\n                                            stateData.map((data, i) => {\r\n                                              return <option key={i} value={data.code}>{data.name}</option>\r\n                                            })\r\n                                          }\r\n                                        </select>)\r\n                                    }}\r\n                                  />\r\n                                  :\r\n                                  <input type=\"text\" name={quoteForm.stateProvince.name} ref={register(quoteForm.stateProvince.validate)} placeholder={strings[\"State\"]} />\r\n                              }\r\n                              {errors[quoteForm.stateProvince.name] && <p className=\"error-msg\">{errors[quoteForm.stateProvince.name].message}</p>}\r\n                            </div>\r\n                            <div className=\"tax-select\">\r\n                              \r\n                              <input type=\"text\" name={quoteForm.postalCode.name} ref={register(quoteForm.postalCode.validate)} placeholder={strings[\"Postcode\"]} />\r\n                              {errors[quoteForm.postalCode.name] && <p className=\"error-msg\">{errors[quoteForm.postalCode.name].message}</p>}\r\n                            </div>\r\n                            <button className=\"cart-btn-2\" type=\"submit\" >\r\n                              {strings[\"Get A Quote\"]}\r\n                            </button>\r\n                          </form>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                  </div>\r\n                    */}\r\n\r\n                  <div className=\"col-lg-8 col-md-6 cart-total\">\r\n                    <div className=\"box-custom\">\r\n                      <div className=\"discount-code-wrapper coupon-code\">\r\n                        <div className=\"title-wrap\">\r\n                          <h4 className=\"cart-bottom-title section-bg-gray\">\r\n                            {strings[\"Use Coupon Code\"]}\r\n                          </h4>\r\n                        </div>\r\n                        {\r\n                          cartItems.promoCode ?\r\n                            <div className=\"discount-code\">\r\n                              <p className=\"coupon-applied\">Your coupon code has been applied!</p>\r\n                              <h1 className=\"promoCode\">{cartItems.promoCode}</h1>\r\n                            </div> :\r\n                            <div className=\"discount-code\">\r\n                              <p>{strings[\"Enter your coupon code if you have one.\"]}</p>\r\n                              <form onSubmit={codeSubmit(applyPromoCode)}>\r\n                                <input type=\"text\" name={couponCode.code.name} ref={codeRef(couponCode.code.validate)} />\r\n                                {codeErr[couponCode.code.name] && <p className=\"error-msg\">{codeErr[couponCode.code.name].message}</p>}\r\n                                <button className=\"cart-btn-2\" type=\"submit\">\r\n                                  {strings[\"Apply Coupon\"]}\r\n                                </button>\r\n                              </form>\r\n                            </div>\r\n                        }\r\n\r\n                      </div>\r\n\r\n                      <div className=\"grand-totall cart-total-box\">\r\n                        <div className=\"title-wrap\">\r\n                          <h4 className=\"cart-bottom-title section-bg-gary-cart\">\r\n                            {strings[\"Cart Total\"]}\r\n                          </h4>\r\n                        </div>\r\n                        <h5>\r\n                          {strings[\"Total products\"]}{\" \"}\r\n                          <span>\r\n                            {cartItems.displaySubTotal}\r\n                          </span>\r\n                        </h5>\r\n                        <h4 className=\"grand-totall-title\">\r\n                          {strings[\"Grand Total\"]}{\" \"}\r\n                          <span>\r\n                            {cartItems.displaySubTotal}\r\n                          </span>\r\n                        </h4>\r\n                        <Link to={process.env.PUBLIC_URL + \"/checkout\"}>\r\n                          {strings[\"Proceed to Checkout\"]}\r\n                        </Link>\r\n                      </div>\r\n                    </div>\r\n                    {\r\n                      shippingOptions &&\r\n                      <div className=\"grand-totall\" style={{ marginTop: 30 }}>\r\n                        <div className=\"title-wrap\">\r\n                          <h4 className=\"cart-bottom-title section-bg-gary-cart\">\r\n                            {\"Shipping and tax\"}\r\n                          </h4>\r\n                        </div>\r\n                        {\r\n                          shippingOptions.map((value, i) => {\r\n                            return (<h5 key={i}>\r\n                              {value.optionName}{\" \"}\r\n                              <span>\r\n                                {value.optionPriceText}\r\n                              </span>\r\n                            </h5>)\r\n                          })\r\n                        }\r\n                      </div>\r\n                    }\r\n                  </div>\r\n\r\n                </div>\r\n              </Fragment>\r\n            ) : (\r\n                !isLoading && <div className=\"row\">\r\n                  <div className=\"col-lg-12\">\r\n                    <div className=\"item-empty-area text-center\">\r\n                      <div className=\"item-empty-area__icon mb-30\">\r\n                        <i className=\"pe-7s-cart\"></i>\r\n                      </div>\r\n                      <div className=\"item-empty-area__text\">\r\n                        {strings[\"No items found in cart\"]} <br />{\" \"}\r\n                        <Link to=\"/\">\r\n                          {strings[\"Shop now\"]}\r\n                        </Link>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nCart.propTypes = {\r\n  // addToCart: PropTypes.func,\r\n  cartItems: PropTypes.object,\r\n  // currency: PropTypes.object,\r\n  decreaseQuantity: PropTypes.func,\r\n  increaseQuantity: PropTypes.func,\r\n  location: PropTypes.object,\r\n  deleteAllFromCart: PropTypes.func,\r\n  deleteFromCart: PropTypes.func\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n\r\n    cartCount: state.cartData.cartCount,\r\n    cartID: state.cartData.cartID,\r\n    defaultStore: state.merchantData.defaultStore,\r\n    countryData: state.userData.country,\r\n    stateData: state.userData.state,\r\n    merchant: state.merchantData.merchant,\r\n    isLoading: state.loading.isLoading\r\n  };\r\n};\r\n\r\nfunction defaultImage(product) {\r\n  if (product.images && product.images.length > 0) {\r\n    return product.images[0].imageUrl;\r\n  } else if (product.image != null) {\r\n    return product.imageUrl;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    // addToCart: (item, addToast, quantityCount) => {\r\n    //   dispatch(addToCart(item, addToast, quantityCount));\r\n    // },\r\n    setLoader: (value) => {\r\n      dispatch(setLoader(value));\r\n    },\r\n    decreaseQuantity: (item, addToast, cartId, quantityCount, defaultStore) => {\r\n      dispatch(addToCart(item, addToast, cartId, quantityCount, defaultStore));\r\n    },\r\n    increaseQuantity: (item, addToast, cartId, quantityCount, defaultStore) => {\r\n      dispatch(addToCart(item, addToast, cartId, quantityCount, defaultStore));\r\n    },\r\n    // decreaseQuantity: (cartItems, key, item, addToast, cartId, quantityCount, defaultStore) => {\r\n    //   console.log('decreaseQuantity...');\r\n    //   //dispatch(addToCart(item, addToast, cartId, quantityCount, defaultStore));\r\n    // },\r\n    // increaseQuantity: (item, cartId, quantityCount, addToast) => {\r\n    //   dispatch(addToCart(item, addToast, cartId, quantityCount, ''));\r\n    // },\r\n    // getValue: () => {\r\n    //   return 5;\r\n    // },\r\n    deleteFromCart: (cartId, item, defaultStore, addToast) => {\r\n      dispatch(deleteFromCart(cartId, item, defaultStore, addToast));\r\n    },\r\n    getState: (code) => {\r\n      dispatch(getState(code));\r\n    }\r\n    // deleteAllFromCart: addToast => {\r\n    //   dispatch(deleteAllFromCart(addToast));\r\n    // }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(multilanguage(Cart));\r\n"],"sourceRoot":""}