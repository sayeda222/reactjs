{"version":3,"sources":["pages/other/ResetPassword.js"],"names":["resetForm","name","validate","required","value","message","hasSpecialChar","match","connect","state","ownProps","defaultStore","merchantData","storeCode","params","code","resetID","id","merchant","dispatch","setLoader","multilanguage","strings","props","location","addToast","useToasts","history","useHistory","useState","isValid","setIsValid","useForm","mode","defaultValues","password","repeatPassword","criteriaMode","register","handleSubmit","errors","watch","setError","clearErrors","reset","useEffect","checkValidURL","a","action","constant","ACTION","CUSTOMER","RESET","WebService","get","onSubmit","data","PASSWORD","param","post","push","appearance","autoDismiss","console","log","to","headerContainerClass","headerPaddingClass","headerTop","className","Container","defaultActiveKey","variant","Item","Link","eventKey","Content","Pane","type","ref","placeholder","onChange","e","target","onPasswordChange","onConfirmPassword"],"mappings":"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","file":"static/js/27.4f9c0a2f.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport MetaTags from \"react-meta-tags\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { BreadcrumbsItem } from \"react-breadcrumbs-dynamic\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Layout from \"../../layouts/Layout\";\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\nimport { useForm } from \"react-hook-form\";\nimport { useToasts } from \"react-toast-notifications\";\nimport WebService from '../../util/webService';\nimport constant from '../../util/constant';\nimport { setLoader } from \"../../redux/actions/loaderActions\";\nimport { connect } from \"react-redux\";\nimport { multilanguage } from \"redux-multilanguage\";\nconst resetForm = {\n    password: {\n        name: \"password\",\n        validate: {\n            required: {\n                value: true,\n                message: \"Password is required\"\n            },\n\n            validate: {\n                hasSpecialChar: (value) => (value && value.match(/^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,16}$/)) || 'Password must be minimum of 8 characters atleast one number and one special character'\n            }\n        }\n    },\n    repeatPassword: {\n        name: \"repeatPassword\",\n        validate: {\n            required: {\n                value: true,\n                message: \"Repeat Password is required\"\n            }\n        }\n    },\n};\n\nconst ResetPassword = ({ merchant, strings, props, location, setLoader, defaultStore, storeCode, resetID }) => {\n    // const { pathname } = location;\n    const { addToast } = useToasts();\n    const history = useHistory();\n    const [isValid, setIsValid] = useState(true);\n    const { register, handleSubmit, errors, watch, setError, clearErrors, reset } = useForm({\n        mode: \"onChange\",\n        defaultValues: { password: \"\", repeatPassword: \"\" },\n        criteriaMode: \"all\"\n    });\n    useEffect(() => {\n        checkValidURL()\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps \n    }, []);\n\n    const checkValidURL = async () => {\n        setLoader(true)\n        try {\n            let action = constant.ACTION.CUSTOMER + storeCode + '/' + constant.ACTION.RESET + resetID;\n            await WebService.get(action);\n            // if (response) {\n            //     // addToast(\"You have successfully logged in to this website\", { appearance: \"success\", autoDismiss: true });\n            // }\n            setIsValid(true)\n            setLoader(false)\n        } catch (error) {\n            setIsValid(false)\n            // addToast(\"Customer is not found\", { appearance: \"error\", autoDismiss: true });\n            setLoader(false)\n        }\n    }\n    const onConfirmPassword = (e) => {\n        if (watch('password') !== e.target.value) {\n            return setError(\n                resetForm.repeatPassword.name,\n                {\n                    type: \"notMatch\",\n                    message: \"Repeat Password should be the same as a password\"\n                }\n            );\n        }\n\n    }\n    const onPasswordChange = (e) => {\n        if (watch('repeatPassword') !== '' && watch('repeatPassword') !== e.target.value) {\n            return setError(\n                resetForm.repeatPassword.name,\n                {\n                    type: \"notMatch\",\n                    message: \"Repeat Password should be the same as a password\"\n                }\n            );\n\n        } else {\n            clearErrors(resetForm.repeatPassword.name);\n        }\n\n    }\n    const onSubmit = async (data) => {\n        setLoader(true)\n        try {\n            let action = constant.ACTION.CUSTOMER + storeCode + '/' + constant.ACTION.PASSWORD + resetID;\n            let param = { \"password\": data.password, \"repeatPassword\": data.repeatPassword }\n            await WebService.post(action, param);\n            // if (response) {\n            reset({})\n            history.push('/login')\n            addToast(\"You have successfully reset your password. you can now login as usual with your email address and your new password.\", { appearance: \"success\", autoDismiss: true });\n            // }\n            setLoader(false)\n        } catch (error) {\n            console.log(error)\n            addToast(\"Password don't match\", { appearance: \"error\", autoDismiss: true });\n            setLoader(false)\n        }\n    }\n    return (\n        <Fragment>\n            <MetaTags>\n                <title>{merchant.name} | {strings[\"Reset Password\"]}</title>\n                {/* <meta\n          name=\"description\"\n          content=\"Compare page of flone react minimalist eCommerce template.\"\n        /> */}\n            </MetaTags>\n            <BreadcrumbsItem to={process.env.PUBLIC_URL + \"/\"}>{strings[\"Home\"]}</BreadcrumbsItem>\n            <BreadcrumbsItem to={\"/login\"}>\n                {strings[\"Reset Password\"]}\n            </BreadcrumbsItem>\n            <Layout headerContainerClass=\"container-fluid\"\n                headerPaddingClass=\"header-padding-2\"\n                headerTop=\"visible\">\n                {/* breadcrumb */}\n                <Breadcrumb />\n                {\n                    isValid &&\n                    <div className=\"login-register-area pt-100 pb-100\">\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <div className=\"col-lg-7 col-md-12 ml-auto mr-auto\">\n                                    <div className=\"login-register-wrapper\">\n                                        <Tab.Container defaultActiveKey={'forgot-password'}>\n                                            <Nav variant=\"pills\" className=\"login-register-tab-list\">\n                                                <Nav.Item>\n                                                    <Nav.Link eventKey=\"forgot-password\">\n                                                        <h4>{strings[\"Reset Password\"]}</h4>\n                                                    </Nav.Link>\n                                                </Nav.Item>\n                                            </Nav>\n                                            <Tab.Content>\n                                                <Tab.Pane eventKey=\"forgot-password\">\n                                                    <div className=\"login-form-container\">\n                                                        <div className=\"login-register-form\">\n                                                            <form onSubmit={handleSubmit(onSubmit)} >\n                                                                <p>{strings[\"Reset Password Note\"]}</p>\n                                                                <div className=\"login-input\">\n                                                                    <input type=\"password\" name={resetForm.password.name} ref={register(resetForm.password.validate)} placeholder={strings[\"Password\"]} onChange={(e) => onPasswordChange(e)} />\n                                                                    {errors[resetForm.password.name] && <p className=\"error-msg\">{errors[resetForm.password.name].message}</p>}\n\n                                                                </div>\n                                                                <div className=\"login-input\">\n                                                                    <input type=\"password\" name={resetForm.repeatPassword.name} ref={register(resetForm.repeatPassword.validate)} placeholder={strings[\"Repeat Password\"]} onChange={(e) => onConfirmPassword(e)} />\n                                                                    {errors[resetForm.repeatPassword.name] && <p className=\"error-msg\">{errors[resetForm.repeatPassword.name].message}</p>}\n\n                                                                </div>\n                                                                <div className=\"button-box\">\n                                                                    <div className=\"login-toggle-btn\">\n                                                                        {/* <input type=\"checkbox\" /> */}\n                                                                        <label className=\"ml-30\"></label>\n                                                                        {/* <Link to={\"/login\"}>\n                                                                        Go to login\n                                                                    </Link> */}\n                                                                    </div>\n                                                                    <button type=\"submit\">\n                                                                        <span>{strings[\"Update Password\"]}</span>\n                                                                    </button>\n                                                                </div>\n                                                            </form>\n                                                        </div>\n                                                    </div>\n                                                </Tab.Pane>\n                                            </Tab.Content>\n                                        </Tab.Container>\n\n\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                }\n                {\n                    !isValid &&\n                    <div className=\"error-area pt-40 pb-100\">\n                        <div className=\"container\">\n                            <div className=\"row justify-content-center\">\n                                <div className=\"col-xl-7 col-lg-8 text-center\">\n                                    <div className=\"error\">\n                                        <h1>400</h1>\n                                        <h2>{strings[\"Link Invalid\"]}</h2>\n                                        <p>\n                                            {strings[\"To Your Reset Password\"]}\n                                        </p>\n\n                                        <Link to={\"/login\"} className=\"error-btn\">\n                                            {strings[\"Back to login page\"]}\n                                        </Link>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                }\n\n            </Layout>\n        </Fragment >\n    );\n};\n\nResetPassword.propTypes = {\n    location: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    // console.log(ownProps);\n    return {\n        defaultStore: state.merchantData.defaultStore,\n        storeCode: ownProps.match.params.code,\n        resetID: ownProps.match.params.id,\n        merchant: state.merchantData.merchant\n    };\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        setLoader: (value) => {\n            dispatch(setLoader(value));\n        }\n    };\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(multilanguage(ResetPassword));\n            // export default LoginRegister;\n"],"sourceRoot":""}