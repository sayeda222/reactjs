{"version":3,"sources":["pages/other/ForgotPassword.js"],"names":["forgotForm","name","validate","required","value","message","pattern","connect","state","defaultStore","merchantData","merchant","dispatch","setLoader","multilanguage","strings","props","location","addToast","useToasts","useForm","mode","defaultValues","username","criteriaMode","register","handleSubmit","errors","reset","onSubmit","data","a","action","constant","ACTION","CUSTOMER","PASSWORD","RESET","REQUEST","param","WebService","post","appearance","autoDismiss","to","headerContainerClass","headerPaddingClass","headerTop","className","Container","defaultActiveKey","variant","Item","Link","eventKey","Content","Pane","type","placeholder","ref"],"mappings":"oSAgBMA,EACQ,CACNC,KAAM,WACNC,SAAU,CACNC,SAAU,CACNC,OAAO,EACPC,QAAS,qBAEbC,QAAS,CACLF,MAAO,uCACPC,QAAS,uCA+HVE,6BAfS,SAACC,GACrB,MAAO,CACHC,aAAcD,EAAME,aAAaD,aACjCE,SAAUH,EAAME,aAAaC,aAGV,SAAAC,GACvB,MAAO,CACHC,UAAW,SAACT,GACRQ,EAASC,YAAUT,QAMhBG,CAA6CO,yBAzHrC,SAAC,GAAqE,IAAnEH,EAAkE,EAAlEA,SAAUI,EAAwD,EAAxDA,QAA0BF,GAA8B,EAA/CG,MAA+C,EAAxCC,SAAwC,EAA9BJ,WAElDK,GAFgF,EAAnBT,aAEhDU,sBAAbD,UAER,EAAkDE,YAAQ,CACtDC,KAAM,WACNC,cAAe,CAAEC,SAAU,IAC3BC,aAAc,QAHVC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,OAAQC,EAAxC,EAAwCA,MAKlCC,EAAQ,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACblB,GAAU,GADG,SAGLmB,EAASC,IAASC,OAAOC,SAAWF,IAASC,OAAOE,SAAWH,IAASC,OAAOG,MAAQJ,IAASC,OAAOI,QACvGC,EAAQ,CAAE,SAAYT,EAAKP,UAJtB,SAKHiB,IAAWC,KAAKT,EAAQO,GALrB,OAOTX,EAAM,IACNV,EAAS,+EAAgF,CAAEwB,WAAY,UAAWC,aAAa,IAE/H9B,GAAU,GAVD,kDAYTK,EAAS,wBAAyB,CAAEwB,WAAY,QAASC,aAAa,IACtE9B,GAAU,GAbD,0DAAH,sDAgBd,OACI,eAAC,WAAD,WACI,cAAC,IAAD,UACI,kCAAQF,EAASV,KAAjB,MAA0Bc,EAAQ,wBAMtC,cAAC,kBAAD,CAAiB6B,GAA6B,IAA9C,SAAoD7B,EAAO,OAC3D,cAAC,kBAAD,CAAiB6B,GAAI,SAArB,SACK7B,EAAQ,qBAEb,eAAC,IAAD,CAAQ8B,qBAAqB,kBACzBC,mBAAmB,mBACnBC,UAAU,UAFd,UAII,cAAC,IAAD,IACA,qBAAKC,UAAU,oCAAf,SACI,qBAAKA,UAAU,YAAf,SACI,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,qCAAf,SACI,qBAAKA,UAAU,yBAAf,SACI,eAAC,IAAIC,UAAL,CAAeC,iBAAkB,kBAAjC,UACI,cAAC,IAAD,CAAKC,QAAQ,QAAQH,UAAU,0BAA/B,SACI,cAAC,IAAII,KAAL,UACI,cAAC,IAAIC,KAAL,CAAUC,SAAS,kBAAnB,SACI,6BAAKvC,EAAQ,2BAIzB,cAAC,IAAIwC,QAAL,UACI,cAAC,IAAIC,KAAL,CAAUF,SAAS,kBAAnB,SACI,qBAAKN,UAAU,uBAAf,SACI,qBAAKA,UAAU,sBAAf,SACI,uBAAMnB,SAAUH,EAAaG,GAA7B,UACI,4BAAId,EAAQ,0BACZ,sBAAKiC,UAAU,cAAf,UACI,uBACIS,KAAK,OACLxD,KAAMD,EAAoBC,KAC1ByD,YAAa3C,EAAQ,iBACrB4C,IAAKlC,EAASzB,EAAoBE,YAGrCyB,EAAO3B,EAAoBC,OAAS,mBAAG+C,UAAU,YAAb,SAA0BrB,EAAO3B,EAAoBC,MAAMI,aAEpG,sBAAK2C,UAAU,aAAf,UACI,sBAAKA,UAAU,mBAAf,UAEI,uBAAOA,UAAU,UACjB,cAAC,IAAD,CAAMJ,GAAI,SAAV,SACK7B,EAAQ,oBAGjB,wBAAQ0C,KAAK,SAAb,SACI,+BAAO1C,EAAQ","file":"static/js/22.2c589452.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport React, { Fragment } from \"react\";\nimport MetaTags from \"react-meta-tags\";\nimport { Link } from \"react-router-dom\";\nimport { BreadcrumbsItem } from \"react-breadcrumbs-dynamic\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Layout from \"../../layouts/Layout\";\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\nimport { useForm } from \"react-hook-form\";\nimport { useToasts } from \"react-toast-notifications\";\nimport WebService from '../../util/webService';\nimport constant from '../../util/constant';\nimport { setLoader } from \"../../redux/actions/loaderActions\";\nimport { connect } from \"react-redux\";\nimport { multilanguage } from \"redux-multilanguage\";\nconst forgotForm = {\n    username: {\n        name: \"username\",\n        validate: {\n            required: {\n                value: true,\n                message: \"Email is required\"\n            },\n            pattern: {\n                value: /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i,\n                message: 'Please entered the valid email id'\n            }\n        }\n    },\n};\n\nconst ForgotPassword = ({ merchant, strings, props, location, setLoader, defaultStore }) => {\n    // const { pathname } = location;\n    const { addToast } = useToasts();\n    // const history = useHistory();\n    const { register, handleSubmit, errors, reset } = useForm({\n        mode: \"onChange\",\n        defaultValues: { username: \"\" },\n        criteriaMode: \"all\"\n    });\n    const onSubmit = async (data) => {\n        setLoader(true)\n        try {\n            let action = constant.ACTION.CUSTOMER + constant.ACTION.PASSWORD + constant.ACTION.RESET + constant.ACTION.REQUEST;\n            let param = { \"username\": data.username }\n            await WebService.post(action, param);\n            // if (response) {\n            reset({})\n            addToast(\"A Reset password link has been sent to the email address please check email.\", { appearance: \"success\", autoDismiss: true });\n            // }\n            setLoader(false)\n        } catch (error) {\n            addToast(\"Customer is not found\", { appearance: \"error\", autoDismiss: true });\n            setLoader(false)\n        }\n    }\n    return (\n        <Fragment>\n            <MetaTags>\n                <title>{merchant.name} | {strings[\"Forgot Password\"]}</title>\n                {/* <meta\n          name=\"description\"\n          content=\"Compare page of flone react minimalist eCommerce template.\"\n        /> */}\n            </MetaTags>\n            <BreadcrumbsItem to={process.env.PUBLIC_URL + \"/\"}>{strings[\"Home\"]}</BreadcrumbsItem>\n            <BreadcrumbsItem to={\"/login\"}>\n                {strings[\"Forgot Password\"]}\n            </BreadcrumbsItem>\n            <Layout headerContainerClass=\"container-fluid\"\n                headerPaddingClass=\"header-padding-2\"\n                headerTop=\"visible\">\n                {/* breadcrumb */}\n                <Breadcrumb />\n                <div className=\"login-register-area pt-100 pb-100\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-7 col-md-12 ml-auto mr-auto\">\n                                <div className=\"login-register-wrapper\">\n                                    <Tab.Container defaultActiveKey={'forgot-password'}>\n                                        <Nav variant=\"pills\" className=\"login-register-tab-list\">\n                                            <Nav.Item>\n                                                <Nav.Link eventKey=\"forgot-password\">\n                                                    <h4>{strings[\"Forgot Password\"]}</h4>\n                                                </Nav.Link>\n                                            </Nav.Item>\n                                        </Nav>\n                                        <Tab.Content>\n                                            <Tab.Pane eventKey=\"forgot-password\">\n                                                <div className=\"login-form-container\">\n                                                    <div className=\"login-register-form\">\n                                                        <form onSubmit={handleSubmit(onSubmit)} >\n                                                            <p>{strings[\"Forgot Password Note\"]}</p>\n                                                            <div className=\"login-input\">\n                                                                <input\n                                                                    type=\"text\"\n                                                                    name={forgotForm.username.name}\n                                                                    placeholder={strings[\"Email address\"]}\n                                                                    ref={register(forgotForm.username.validate)}\n                                                                />\n\n                                                                {errors[forgotForm.username.name] && <p className=\"error-msg\">{errors[forgotForm.username.name].message}</p>}\n                                                            </div>\n                                                            <div className=\"button-box\">\n                                                                <div className=\"login-toggle-btn\">\n                                                                    {/* <input type=\"checkbox\" /> */}\n                                                                    <label className=\"ml-30\"></label>\n                                                                    <Link to={\"/login\"}>\n                                                                        {strings[\"Go to login\"]}\n                                                                    </Link>\n                                                                </div>\n                                                                <button type=\"submit\">\n                                                                    <span>{strings[\"Reset Password\"]}</span>\n                                                                </button>\n                                                            </div>\n                                                        </form>\n                                                    </div>\n                                                </div>\n                                            </Tab.Pane>\n                                        </Tab.Content>\n                                    </Tab.Container>\n\n\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Layout>\n        </Fragment >\n    );\n};\n\nForgotPassword.propTypes = {\n    location: PropTypes.object\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        defaultStore: state.merchantData.defaultStore,\n        merchant: state.merchantData.merchant\n    };\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        setLoader: (value) => {\n            dispatch(setLoader(value));\n        }\n    };\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(multilanguage(ForgotPassword));\n            // export default LoginRegister;\n"],"sourceRoot":""}