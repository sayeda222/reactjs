{"version":3,"sources":["pages/other/LoginRegister.js"],"names":["loginForm","name","validate","required","value","message","pattern","registerForm","email","password","hasSpecialChar","match","repeatPassword","firstName","lastName","country","stateProvince","connect","state","shipCountryData","userData","shipCountry","cartItems","cartData","currentLocation","currentAddress","stateData","defaultStore","merchantData","merchant","dispatch","addToCart","item","addToast","cartItem","quantityCount","selectedProductColor","code","setLoader","setUser","data","getCountry","getShippingCountry","getState","getCart","cartID","multilanguage","strings","location","props","pathname","useToasts","history","useHistory","useState","isRemember","setIsRemember","useForm","mode","defaultValues","username","criteriaMode","register","handleSubmit","errors","setLoginValue","setValue","register2","errors2","handleSubmit2","control","watch","setError","clearErrors","useEffect","getLocalData","currentLanguageCode","setDefualtsValue","length","find","i","types","some","address_components","short_name","long_name","onSubmit","a","action","constant","ACTION","CUSTOMER","LOGIN","param","loginPassword","WebService","post","response","isValidObject","getCartandAdd","setLocalData","appearance","autoDismiss","token","push","AUTH","CARTS","JSON","parse","get","console","log","setTimeout","products","forEach","element","quantity","onRegister","REGISTER","to","process","headerContainerClass","headerPaddingClass","headerTop","className","Container","defaultActiveKey","split","variant","Item","Link","eventKey","Content","Pane","type","placeholder","ref","checked","onChange","e","target","autoComplete","onPasswordChange","onConfirmPassword","rules","render","map"],"mappings":"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","file":"static/js/23.16755e7a.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\nimport MetaTags from \"react-meta-tags\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { BreadcrumbsItem } from \"react-breadcrumbs-dynamic\";\r\nimport Tab from \"react-bootstrap/Tab\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Layout from \"../../layouts/Layout\";\r\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport WebService from '../../util/webService';\r\nimport constant from '../../util/constant';\r\nimport { setLocalData, isValidObject, getLocalData } from '../../util/helper';\r\nimport { setLoader } from \"../../redux/actions/loaderActions\";\r\nimport { setUser, getCountry, getShippingCountry, getState } from \"../../redux/actions/userAction\";\r\nimport { addToCart, getCart } from \"../../redux/actions/cartActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { multilanguage } from \"redux-multilanguage\";\r\nconst loginForm = {\r\n  username: {\r\n    name: \"username\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Email is required\"\r\n      },\r\n      pattern: {\r\n        value: /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i,\r\n        message: 'Please entered the valid email id'\r\n      }\r\n    }\r\n  },\r\n  loginPassword: {\r\n    name: \"loginPassword\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Password is required\"\r\n      }\r\n    }\r\n  }\r\n};\r\nconst registerForm = {\r\n  email: {\r\n    name: \"email\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Email is required\"\r\n      },\r\n      pattern: {\r\n        value: /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i,\r\n        message: 'Please entered the valid email id'\r\n      }\r\n    }\r\n  },\r\n  password: {\r\n    name: \"password\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Password is required\"\r\n      },\r\n\r\n      validate: {\r\n        hasSpecialChar: (value) => (value && value.match(/^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,16}$/)) || 'Password must be minimum of 8 characters atleast one number and one special character'\r\n      }\r\n    }\r\n  },\r\n  repeatPassword: {\r\n    name: \"repeatPassword\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Repeat Password is required\"\r\n      }\r\n    }\r\n  },\r\n  firstName: {\r\n    name: \"firstName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Firstname is required\"\r\n      }\r\n    }\r\n  },\r\n  lastName: {\r\n    name: \"lastName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Lastname is required\"\r\n      }\r\n    }\r\n  },\r\n  country: {\r\n    name: \"country\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Country is required\"\r\n      }\r\n    }\r\n  },\r\n  stateProvince: {\r\n    name: \"stateProvince\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"State is required\"\r\n      }\r\n    }\r\n  },\r\n};\r\nconst LoginRegister = ({ merchant, strings, props, location, setLoader, setUser, getCart, getCountry, getShippingCountry, getState, shipCountryData, currentLocation, stateData, cartItems, addToCart, defaultStore }) => {\r\n  const { pathname } = location;\r\n  const { addToast } = useToasts();\r\n  const history = useHistory();\r\n  const [isRemember, setIsRemember] = useState(false);\r\n  const { register, handleSubmit, errors, setValue: setLoginValue } = useForm({\r\n    mode: \"onChange\",\r\n    defaultValues: { username: \"\", password: \"\" },\r\n    criteriaMode: \"all\"\r\n  });\r\n  const {\r\n    register: register2,\r\n    errors: errors2,\r\n    handleSubmit: handleSubmit2, setValue, control, watch, setError, clearErrors\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n    criteriaMode: \"all\"\r\n  });\r\n  useEffect(() => {\r\n    // console.log(cartItems);\r\n    if (getLocalData('isRemember') === 'true') {\r\n      setIsRemember(true)\r\n      setLoginValue('username', getLocalData('loginEmail'))\r\n      // setLoginValue('loginPassword', '')\r\n    }\r\n    getCountry(multilanguage.currentLanguageCode)\r\n    getShippingCountry(multilanguage.currentLanguageCode)\r\n    setDefualtsValue()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps \r\n  }, [cartItems]);\r\n  const setDefualtsValue = () => {\r\n    // console.log(currentLocation);\r\n    if (currentLocation.length > 0) {\r\n      setValue('country', currentLocation.find(i => i.types.some(i => i === \"country\")).address_components[0].short_name)\r\n      // // setValue('city', currentLocation.find(i => i.types.some(i => i == \"locality\")).address_components[0].short_name)\r\n      setValue('stateProvince', currentLocation.find(i => i.types.some(i => i === \"administrative_area_level_1\")).address_components[0].long_name)\r\n    }\r\n\r\n  }\r\n  const onSubmit = async (data) => {\r\n    setLoader(true)\r\n    try {\r\n      let action = constant.ACTION.CUSTOMER + constant.ACTION.LOGIN;\r\n      let param = { \"username\": data.username, \"password\": data.loginPassword }\r\n      let response = await WebService.post(action, param);\r\n      if (response) {\r\n        if (isValidObject(cartItems)) {\r\n          // getCart('', response)\r\n          // setTimeout(() => {\r\n          // console.log(cartItems);\r\n          // cartItems.products.forEach((element) => {\r\n          //   addToCart(element, '', cartItems.code, element.quantity, defaultStore, response)\r\n          // });\r\n          getCartandAdd(response)\r\n          // }, 5000);\r\n\r\n        } else {\r\n          getCart('', response)\r\n        }\r\n        if (getLocalData('isRemember') === 'true') {\r\n          setLocalData('loginEmail', data.username)\r\n        } else {\r\n          setLocalData('loginEmail', '')\r\n        }\r\n        addToast(\"You have successfully logged in to this website\", { appearance: \"success\", autoDismiss: true });\r\n        setUser(response)\r\n        setLocalData('token', response.token)\r\n        history.push('my-account')\r\n\r\n      }\r\n      setLoader(false)\r\n    } catch (error) {\r\n      addToast(\"Incorrect username or password\", { appearance: \"error\", autoDismiss: true });\r\n      setLoader(false)\r\n    }\r\n  };\r\n  const getCartandAdd = async (data) => {\r\n    try {\r\n      let action = constant.ACTION.AUTH + constant.ACTION.CUSTOMER + constant.ACTION.CARTS + '?&lang=' + JSON.parse(getLocalData('redux_localstorage_simple')).multilanguage.currentLanguageCode;\r\n      let response = await WebService.get(action);\r\n      console.log(response)\r\n      if (response) {\r\n\r\n        setTimeout(() => {\r\n          console.log(response.code);\r\n          cartItems.products.forEach((element) => {\r\n            console.log(response.code);\r\n            addToCart(element, '', response, element.quantity, defaultStore, data)\r\n          });\r\n        }, 2000);\r\n      }\r\n    } catch (error) {\r\n\r\n    }\r\n  }\r\n  const onConfirmPassword = (e) => {\r\n    if (watch('password') !== e.target.value) {\r\n      return setError(\r\n        registerForm.repeatPassword.name,\r\n        {\r\n          type: \"notMatch\",\r\n          message: \"Repeat Password should be the same as a password\"\r\n        }\r\n      );\r\n    }\r\n\r\n  }\r\n  const onPasswordChange = (e) => {\r\n    if (watch('repeatPassword') !== '' && watch('repeatPassword') !== e.target.value) {\r\n      return setError(\r\n        registerForm.repeatPassword.name,\r\n        {\r\n          type: \"notMatch\",\r\n          message: \"Repeat Password should be the same as a password\"\r\n        }\r\n      );\r\n\r\n    } else {\r\n      clearErrors(registerForm.repeatPassword.name);\r\n    }\r\n\r\n  }\r\n  const onRegister = async (data) => {\r\n    // console.log(data)\r\n    setLoader(true)\r\n    try {\r\n      let action = constant.ACTION.CUSTOMER + constant.ACTION.REGISTER;\r\n      let param = {\r\n        \"userName\": data.email,\r\n        \"password\": data.password,\r\n        \"emailAddress\": data.email,\r\n        \"gender\": \"M\",\r\n        \"language\": \"en\",\r\n        \"billing\": {\r\n          \"country\": data.country,\r\n          \"stateProvince\": data.stateProvince,\r\n          \"firstName\": data.firstName,\r\n          \"lastName\": data.lastName,\r\n        }\r\n      }\r\n      let response = await WebService.post(action, param);\r\n      // console.log(response)\r\n      if (response) {\r\n        addToast(\"'You have successfully registerd in to this website.\", { appearance: \"success\", autoDismiss: true });\r\n        setUser(response)\r\n        setLocalData('token', response.token)\r\n        history.push('my-account')\r\n\r\n      }\r\n      setLoader(false)\r\n    } catch (error) {\r\n      addToast(\"Registering customer already exist\", { appearance: \"error\", autoDismiss: true });\r\n      setLoader(false)\r\n    }\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <MetaTags>\r\n        <title>{merchant.name} | {strings[\"Login\"]}</title>\r\n        {/* <meta\r\n          name=\"description\"\r\n          content=\"Compare page of flone react minimalist eCommerce template.\"\r\n        /> */}\r\n      </MetaTags>\r\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + \"/\"}>{strings[\"Home\"]}</BreadcrumbsItem>\r\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + pathname}>\r\n        {strings[\"Login\"]}\r\n      </BreadcrumbsItem>\r\n      <Layout headerContainerClass=\"container-fluid\"\r\n        headerPaddingClass=\"header-padding-2\"\r\n        headerTop=\"visible\">\r\n        {/* breadcrumb */}\r\n        <Breadcrumb />\r\n        <div className=\"login-register-area pt-100 pb-100\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-7 col-md-12 ml-auto mr-auto\">\r\n                <div className=\"login-register-wrapper\">\r\n                  <Tab.Container defaultActiveKey={pathname.split(\"/\")[1]}>\r\n                    <Nav variant=\"pills\" className=\"login-register-tab-list\">\r\n                      <Nav.Item>\r\n                        <Nav.Link eventKey=\"login\">\r\n                          <h4> {strings[\"Login\"]}</h4>\r\n                        </Nav.Link>\r\n                      </Nav.Item>\r\n                      <Nav.Item>\r\n                        <Nav.Link eventKey=\"register\">\r\n                          <h4> {strings[\"Register\"]}</h4>\r\n                        </Nav.Link>\r\n                      </Nav.Item>\r\n                    </Nav>\r\n                    <Tab.Content>\r\n                      <Tab.Pane eventKey=\"login\">\r\n                        <div className=\"login-form-container\">\r\n                          <div className=\"login-register-form\">\r\n                            <form onSubmit={handleSubmit(onSubmit)} >\r\n                              <div className=\"login-input\">\r\n                                <input\r\n                                  type=\"text\"\r\n                                  name={loginForm.username.name}\r\n                                  placeholder={strings[\"Email address\"]}\r\n                                  ref={register(loginForm.username.validate)}\r\n                                />\r\n\r\n                                {errors[loginForm.username.name] && <p className=\"error-msg\">{errors[loginForm.username.name].message}</p>}\r\n                              </div>\r\n                              <div className=\"login-input\">\r\n                                <input\r\n                                  type=\"text\"\r\n                                  className=\"user-password\"\r\n                                  name={loginForm.loginPassword.name}\r\n                                  placeholder={strings[\"Password\"]}\r\n                                  ref={register(loginForm.loginPassword.validate)}\r\n                                />\r\n                                {errors[loginForm.loginPassword.name] && <p className=\"error-msg\">{errors[loginForm.loginPassword.name].message}</p>}\r\n                              </div>\r\n                              <div className=\"button-box\">\r\n                                <div className=\"login-toggle-btn\">\r\n                                  <input type=\"checkbox\" checked={isRemember} onChange={e => { setIsRemember(!isRemember); e.target.checked ? setLocalData('isRemember', true) : setLocalData('isRemember', false) }} />\r\n                                  <label className=\"ml-10\">{strings[\"Remember me\"]}</label>\r\n                                  <Link to={\"/forgot-password\"}>\r\n                                    {strings[\"Forgot Password?\"]}\r\n                                  </Link>\r\n                                </div>\r\n                                <button type=\"submit\">\r\n                                  <span>{strings[\"Login\"]}</span>\r\n                                </button>\r\n                              </div>\r\n                            </form>\r\n                          </div>\r\n                        </div>\r\n                      </Tab.Pane>\r\n                      <Tab.Pane eventKey=\"register\">\r\n                        <div className=\"login-form-container\">\r\n                          <div className=\"login-register-form\">\r\n                            <form onSubmit={handleSubmit2(onRegister)}>\r\n\r\n                              <p className=\"login-info\">{strings[\"Login Information\"]}</p>\r\n                              <div className=\"login-input\">\r\n                                <input type=\"email\" autoComplete=\"Email\" name={registerForm.email.name} ref={register2(registerForm.email.validate)} placeholder={strings[\"Username\"]} />\r\n                                {errors2[registerForm.email.name] && <p className=\"error-msg\">{errors2[registerForm.email.name].message}</p>}\r\n\r\n                              </div>\r\n                              <div className=\"login-input\">\r\n                                <input type=\"password\" autoComplete=\"new-password\" name={registerForm.password.name} ref={register2(registerForm.password.validate)} placeholder={strings[\"Password\"]} onChange={(e) => onPasswordChange(e)} />\r\n                                {errors2[registerForm.password.name] && <p className=\"error-msg\">{errors2[registerForm.password.name].message}</p>}\r\n\r\n                              </div>\r\n                              <div className=\"login-input\">\r\n                                <input type=\"password\" name={registerForm.repeatPassword.name} ref={register2(registerForm.repeatPassword.validate)} placeholder={strings[\"Repeat Password\"]} onChange={(e) => onConfirmPassword(e)} />\r\n                                {errors2[registerForm.repeatPassword.name] && <p className=\"error-msg\">{errors2[registerForm.repeatPassword.name].message}</p>}\r\n\r\n                              </div>\r\n                              <p className=\"login-info\">{strings[\"Personal Information\"]}</p>\r\n                              <div className=\"login-input\">\r\n                                <input type=\"text\" name={registerForm.firstName.name} ref={register2(registerForm.firstName.validate)} placeholder={strings[\"First Name\"]} />\r\n                                {errors2[registerForm.firstName.name] && <p className=\"error-msg\">{errors2[registerForm.firstName.name].message}</p>}\r\n\r\n                              </div>\r\n                              <div className=\"login-input\">\r\n                                <input type=\"text\" name={registerForm.lastName.name} ref={register2(registerForm.lastName.validate)} placeholder={strings[\"Last Name\"]} />\r\n                                {errors2[registerForm.lastName.name] && <p className=\"error-msg\">{errors2[registerForm.lastName.name].message}</p>}\r\n                              </div>\r\n                              <div className=\"login-input\">\r\n                                <Controller\r\n                                  name={registerForm.country.name}\r\n                                  control={control}\r\n                                  rules={registerForm.country.validate}\r\n                                  render={props => {\r\n                                    return (\r\n                                      <select onChange={(e) => { props.onChange(e.target.value); getState(e.target.value) }} value={props.value}>\r\n                                        <option>{strings[\"Select a country\"]}</option>\r\n                                        {\r\n                                          shipCountryData.map((data, i) => {\r\n                                            return <option key={i} value={data.code}>{data.name}</option>\r\n                                          })\r\n                                        }\r\n                                      </select>\r\n                                    )\r\n                                  }}\r\n                                />\r\n                                {errors2[registerForm.country.name] && <p className=\"error-msg\">{errors2[registerForm.country.name].message}</p>}\r\n                              </div>\r\n                              <div className=\"login-input\">\r\n                                {\r\n                                  stateData && stateData.length > 0 ?\r\n                                    <Controller\r\n                                      name={registerForm.stateProvince.name}\r\n                                      control={control}\r\n                                      rules={registerForm.stateProvince.validate}\r\n                                      render={props => {\r\n                                        return (\r\n                                          <select onChange={(e) => { props.onChange(e.target.value) }} value={props.value}>\r\n                                            <option>{strings[\"Select a state\"]}</option>\r\n                                            {\r\n                                              stateData.map((data, i) => {\r\n                                                return <option key={i} value={data.code}>{data.name}</option>\r\n                                              })\r\n                                            }\r\n                                          </select>)\r\n                                      }}\r\n                                    />\r\n                                    :\r\n                                    <input type=\"text\" name={registerForm.stateProvince.name} ref={register2(registerForm.stateProvince.validate)} placeholder={strings[\"State\"]} />\r\n                                }\r\n                                {errors2[registerForm.stateProvince.name] && <p className=\"error-msg\">{errors2[registerForm.stateProvince.name].message}</p>}\r\n                              </div>\r\n                              <div className=\"button-box\">\r\n                                <button type=\"submit\">\r\n                                  <span>{strings[\"Register\"]}</span>\r\n                                </button>\r\n                              </div>\r\n\r\n\r\n\r\n                            </form>\r\n                          </div>\r\n                        </div>\r\n                      </Tab.Pane>\r\n                    </Tab.Content>\r\n                  </Tab.Container>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    </Fragment >\r\n  );\r\n};\r\n\r\nLoginRegister.propTypes = {\r\n  location: PropTypes.object\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    shipCountryData: state.userData.shipCountry,\r\n    cartItems: state.cartData.cartItems,\r\n    currentLocation: state.userData.currentAddress,\r\n    stateData: state.userData.state,\r\n    defaultStore: state.merchantData.defaultStore,\r\n    merchant: state.merchantData.merchant\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addToCart: (\r\n      item,\r\n      addToast,\r\n      cartItem,\r\n      quantityCount,\r\n      defaultStore,\r\n      userData,\r\n      selectedProductColor\r\n    ) => {\r\n\r\n      // let index = isValidObject(cartItem) ? cartItem.products.findIndex(cart => cart.id === item.id) : -1;\r\n      dispatch(\r\n        addToCart(\r\n          item,\r\n          addToast,\r\n          cartItem.code,\r\n          quantityCount,\r\n          defaultStore,\r\n          userData,\r\n          selectedProductColor\r\n        )\r\n      );\r\n    },\r\n    setLoader: (value) => {\r\n      dispatch(setLoader(value));\r\n    },\r\n    setUser: (data) => {\r\n      dispatch(setUser(data));\r\n    },\r\n    getCountry: () => {\r\n       dispatch(getCountry());\r\n    },\r\n    getShippingCountry: (value) => {\r\n      dispatch(getShippingCountry(value));\r\n    },\r\n    getState: (code) => {\r\n      dispatch(getState(code));\r\n    },\r\n    getCart: (cartID, userData) => {\r\n      dispatch(getCart(cartID, userData));\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(multilanguage(LoginRegister));\r\n// export default LoginRegister;\r\n"],"sourceRoot":""}